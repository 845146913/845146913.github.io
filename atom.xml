<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilenceWang&#39;s Blog</title>
  
  <subtitle>每天进步一点....(不定期更新)</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://845146913.github.io/"/>
  <updated>2019-03-11T16:37:08.005Z</updated>
  <id>https://845146913.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python爬虫爬取某网站数据</title>
    <link href="https://845146913.github.io/2019/03/12/python%E7%88%AC%E8%99%AB/"/>
    <id>https://845146913.github.io/2019/03/12/python爬虫/</id>
    <published>2019-03-11T16:32:39.000Z</published>
    <updated>2019-03-11T16:37:08.005Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫的学习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># _*_coding:utf-8_*_</span></div><div class="line"><span class="comment"># </span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment"># 请求头</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''抓取连接'''</span></div><div class="line">    page = input(<span class="string">"请输入抓取的页面编号：(1,2,3,...)："</span>)</div><div class="line">    page_url = <span class="string">"http://www.xxxx.com/article/list/?page="</span>+str(page)</div><div class="line">    <span class="comment"># 得到网页源代码</span></div><div class="line">    html = requests.get(page_url, headers=headers)</div><div class="line">    html.encoding = <span class="string">"utf-8"</span></div><div class="line">    html = html.text</div><div class="line">    <span class="comment"># 匹配得到每页的表情数据</span></div><div class="line">    url_title_list = re.findall(<span class="string">r'&lt;a href="(.*?)" class="list-group-item random_list"&gt;'</span>, html)</div><div class="line"></div><div class="line">    <span class="comment"># 开启线程下载每页图片</span></div><div class="line">    t1 = threading.Thread(target=down_img, args=(url_title_list,))</div><div class="line">    t1.start()</div><div class="line">    t1.join()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">down_img</span><span class="params">(datas)</span>:</span></div><div class="line">    <span class="string">'''下载图片'''</span></div><div class="line">    <span class="comment"># print("datalist: %s" %datas)</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">for</span> img_url <span class="keyword">in</span> datas:</div><div class="line">            html = requests.get(img_url, headers=headers)</div><div class="line">            html.encoding = <span class="string">"utf-8"</span></div><div class="line">            html = html.text</div><div class="line">            urls = re.findall(<span class="string">r'&lt;img src=".*?" alt=".*?" onerror="this\.src=\'(.*?)\'"&gt;'</span>, html)</div><div class="line">            <span class="comment"># print("imgurls: %s" % urls)</span></div><div class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">                r = requests.get(url, headers = headers)</div><div class="line">                r.raise_for_status()</div><div class="line">                <span class="comment"># 逆序截取一段字符串</span></div><div class="line">                reverse_url = url[:-url.index(<span class="string">"image"</span>):<span class="number">-1</span>]</div><div class="line">                <span class="comment"># 截取图片全名称</span></div><div class="line">                img_full_name = reverse_url[:reverse_url.index(<span class="string">"/"</span>)][::<span class="number">-1</span>]</div><div class="line">                <span class="comment"># print("res_img_url: %s \n rev_sub: %s \n sub: %s" %(url, reverse_url, img_full_name))</span></div><div class="line">                <span class="comment"># 创建imgs文件夹</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"imgs"</span>):</div><div class="line">                    os.mkdir(<span class="string">"imgs"</span>)</div><div class="line">                <span class="comment"># is_contains = len(img_full_name and ".gif")</span></div><div class="line">                is_contains = img_full_name.find(<span class="string">".gif"</span>) &gt; <span class="number">-1</span></div><div class="line">                <span class="comment"># print("is_contains gif: %s" % is_contains)</span></div><div class="line">                <span class="keyword">if</span> is_contains :</div><div class="line">                    <span class="keyword">with</span> open(<span class="string">r'D:/python/imgs/'</span>+img_full_name, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</div><div class="line">                        f.write(r.content)</div><div class="line">                    <span class="keyword">pass</span></div><div class="line">            print(<span class="string">"down_img done!!!"</span>)</div><div class="line">        is_continue = input(<span class="string">"是否继续下载？(y or n):"</span>)</div><div class="line">        <span class="keyword">if</span> is_continue == <span class="string">'y'</span>:</div><div class="line">            main()</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"down_img failed. %s"</span> %e.message)</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line">    </div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;爬虫的学习：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
      
    
    </summary>
    
    
      <category term="python,爬虫,练习" scheme="https://845146913.github.io/tags/python-%E7%88%AC%E8%99%AB-%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop学习笔记</title>
    <link href="https://845146913.github.io/2019/03/12/hadoop%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://845146913.github.io/2019/03/12/hadoop学习笔记/</id>
    <published>2019-03-11T16:26:28.000Z</published>
    <updated>2019-03-11T16:29:42.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="1-hadoop组成"><a href="#1-hadoop组成" class="headerlink" title="1.hadoop组成"></a>1.hadoop组成</h2><p>Hadoop项目主要包含：</p><blockquote><ul><li>Hadoop Common（支撑其他模块）、</li><li>Hadoop Distributed File System（HDFS分布式系统对应用提供高吞吐量的访问）</li><li>Hadoop Yarn（资源管理和任务调度的一个框架）</li><li>Hadoop MapReduce（对海量数据进行处理和计算的Yarn基本系统）</li></ul></blockquote><h3 id="HDFS体系结构："><a href="#HDFS体系结构：" class="headerlink" title="HDFS体系结构："></a>HDFS体系结构：</h3><pre><code>采用主从（Master/Slave）结构模型，一个HDFS集群是由一个NameNode（元数据的管理者）若干个DataNode组成的。</code></pre><h4 id="HDFS指令："><a href="#HDFS指令：" class="headerlink" title="HDFS指令："></a>HDFS指令：</h4><p>  HDFS Shell指令包含各种shell like命令，URI格式是：scheme://auth/path; scheme是hdfs，表示HDFS系统，auth是file，表示本地系统。scheme和auth都是可选的，不选为默认。<br>指令格式：</p><blockquote><ul><li>hadoop fs:使用面最广，可操作任意文件系统</li><li>hdfs dfs:只能操作hdfs系统,hadoop dfs已经过时。</li></ul></blockquote><h3 id="MapReduce："><a href="#MapReduce：" class="headerlink" title="MapReduce："></a>MapReduce：</h3><pre><code>并行编程模式，简单易用。分布式处理海量数据运算和任务调度。</code></pre><h3 id="Hadoop安装配置"><a href="#Hadoop安装配置" class="headerlink" title="Hadoop安装配置"></a>Hadoop安装配置</h3><p>   首先安装jdk，配置jdk环境变量,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">修改环境变量：</div><div class="line">sudo vim ~/.bashrc</div><div class="line">文件的末尾追加下面内容:</div><div class="line"></div><div class="line">#set oracle jdk environment</div><div class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_151  ## 这里要注意目录要换成自己解压的jdk 目录</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH  </div><div class="line">使环境变量马上生效</div><div class="line"> source ~/.bashrc</div></pre></td></tr></table></figure></p><p>   然后再安装Hadoop</p><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-3.0.0/hadoop-3.0.0.tar.gz</div><div class="line"># 解压缩到 /usr/local/hadoop3 ,</div><div class="line">tar -zxvf hadoop-3.0.0.tar.gz -C /usr/local/hadoop3/</div></pre></td></tr></table></figure><h4 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div><div class="line">#Hadoop 3.0</div><div class="line">export HADOOP_HOME=/usr/local/hadoop3</div><div class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</div><div class="line"></div><div class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME </div><div class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME </div><div class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME</div><div class="line">export HADOOP_YARN_HOME=$HADOOP_HOME </div><div class="line"></div><div class="line">export HADOOP_INSTALL=$HADOOP_HOME </div><div class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native </div><div class="line">export HADOOP_CONF_DIR=$HADOOP_HOME </div><div class="line">export HADOOP_PREFIX=$HADOOP_HOME </div><div class="line">export HADOOP_LIBEXEC_DIR=$HADOOP_HOME/libexec </div><div class="line">export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH </div><div class="line">export HADOOP_CONF_DIR=$HADOOP_PREFIX/etc/hadoop</div><div class="line"></div><div class="line">export HDFS_DATANODE_USER=root</div><div class="line">export HDFS_DATANODE_SECURE_USER=root</div><div class="line">export HDFS_SECONDARYNAMENODE_USER=root</div><div class="line">export HDFS_NAMENODE_USER=root</div><div class="line">#给hadoop3文件夹授予用户hadoop3权限</div><div class="line">sudo chown -R hadoop3:hadoop3 /mnt/d/server/hadoop3</div></pre></td></tr></table></figure><h3 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h3><p>分布式，面向列的NoSql数据库。采用hdfs存储数据，用mapreduce操作数据。</p><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><p>基于hadoop的数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，将sql转换成mapred任务进行运行。主要解决非关系型数据查询问题。</p><h4 id="Hive的数据模型"><a href="#Hive的数据模型" class="headerlink" title="Hive的数据模型"></a>Hive的数据模型</h4><p>hive表逻辑上由存储的数据和描述表格形式的相关元数据组成。数据一般存在hdfs上，元数据存关系型数据库中。</p><h4 id="hive-api操作："><a href="#hive-api操作：" class="headerlink" title="hive api操作："></a>hive api操作：</h4><blockquote><ul><li>CLI : shell命令行</li><li>JDBC\ODBC : java调用</li><li>WebUI : 通过浏览器访问Hive.<h4 id="Hive内置函数和UDF"><a href="#Hive内置函数和UDF" class="headerlink" title="Hive内置函数和UDF"></a>Hive内置函数和UDF</h4>内置函数主要：数学函数和聚合函数。<br>UDF函数可以直接用于select语句。<br>编写UDF函数时需要注意：</li><li>自定义UDF需要继承apache.hadoop.hive.ql.UDF类；</li><li>需要实现evaluate函数，evaluate函数支持重载</li></ul></blockquote><h3 id="数据采集Flume"><a href="#数据采集Flume" class="headerlink" title="数据采集Flume"></a>数据采集Flume</h3><p>组件：</p><blockquote><ul><li>Agent : 使用jvm运行flume，每台机器运行一个agent，但是可以在一个agent中包含多个sources和sinks</li><li>Client : 生产数据，运行在一个独立的线程</li><li>Source : 从Client收集数据，传给Channel</li><li>Sink : 从channel收集数据，运行在一个独立线程</li><li>Channel : 连接sources和sinks，这个有点像一个队列</li><li>Events : 可以是日志记录、avro对象等</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h1&gt;&lt;h2 id=&quot;1-hadoop组成&quot;&gt;&lt;a href=&quot;#1-hadoop组成&quot; class=&quot;headerlink&quot; title=&quot;1.had
      
    
    </summary>
    
    
      <category term="hadoop, 笔记, Hdfs, Map, Reduce" scheme="https://845146913.github.io/tags/hadoop-%E7%AC%94%E8%AE%B0-Hdfs-Map-Reduce/"/>
    
  </entry>
  
  <entry>
    <title>Python指定浏览器打开链接方法</title>
    <link href="https://845146913.github.io/2019/03/11/python%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://845146913.github.io/2019/03/11/python打开浏览器/</id>
    <published>2019-03-10T16:22:01.000Z</published>
    <updated>2019-03-11T16:28:03.479Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment">#coding=utf-8</span></div><div class="line"><span class="keyword">import</span> webbrowser</div><div class="line"><span class="comment"># webbrowser.open("C:\\Program Files\\Internet Explorer\\iexplore.exe")</span></div><div class="line">chromePath = <span class="string">r'C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe'</span>      </div><div class="line"></div><div class="line"><span class="comment">#  例如我的：C:\***\***\***\***\Google\Chrome\Application\chrome.exe       </span></div><div class="line"><span class="comment"># chromePath = r'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe'            </span></div><div class="line"></div><div class="line"><span class="comment">#这里的'chrome'可以用其它任意名字，如chrome111，这里将想打开的浏览器保存到'chrome'</span></div><div class="line"></div><div class="line">webbrowser.register(<span class="string">'ie7'</span>, <span class="keyword">None</span>, webbrowser.BackgroundBrowser(chromePath))  </div><div class="line"></div><div class="line">webbrowser.get(<span class="string">'ie7'</span>).open(<span class="string">'http://sino.easy.echosite.cn/login_qz.jsp'</span>,new=<span class="number">1</span>,autoraise=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># webbrowser.get('ie7').open('http://71.81.5.253:8080/login_qz.jsp',new=1,autoraise=True)</span></div><div class="line"><span class="comment"># webbrowser.open("http://sino.easy.echosite.cn/login_qz.jsp")</span></div><div class="line"><span class="comment"># webbrowser.open("http://71.81.5.253:8080/login_qz.jsp")</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
      
    
    </summary>
    
    
      <category term="python,Ie,Chome" scheme="https://845146913.github.io/tags/python-Ie-Chome/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis拦截器处理Oracle数据返回</title>
    <link href="https://845146913.github.io/2019/03/10/MyBatis%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    <id>https://845146913.github.io/2019/03/10/MyBatis拦截器/</id>
    <published>2019-03-10T00:19:33.000Z</published>
    <updated>2019-03-11T16:27:57.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h1><p>项目中使用了Oracle数据库改造之前mysql的项目，由于之前的sql映射xml并不是全实体映射的，大部分使用resultType=”java.util.Map”等这种类型，且Oracle数据库查询的默认返回列名都为大写，虽然可以设置列名为小写，但挺麻烦且出现问题不好处理。因此想在Mybatis框架层做处理。</p><h1 id="2-解决方式"><a href="#2-解决方式" class="headerlink" title="2.解决方式"></a>2.解决方式</h1><p>由于使用的springboot整合的mybatis版本较低，mybatis-3.2.8.jar，并未使用mybatis的starter，所以</p><h2 id="2-1-使用SqlSession封装通用的Dao-CRUD类"><a href="#2-1-使用SqlSession封装通用的Dao-CRUD类" class="headerlink" title="2.1 使用SqlSession封装通用的Dao CRUD类"></a>2.1 使用SqlSession封装通用的Dao CRUD类</h2><p>在R（Query）的方法层返回做统一的处理，比如selectList、selectOne、selectPage等，加上统一处理代码。上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">objToLowcase</span><span class="params">(T o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Map) &#123;</div><div class="line">            Map m=(Map)o;</div><div class="line">            Set&lt;String&gt; set=m.keySet();</div><div class="line">            Map newMap=<span class="keyword">new</span> HashMap();</div><div class="line">            <span class="keyword">for</span>(String key:set)&#123;</div><div class="line">                <span class="comment">// 判断key是否是以小写字符开头</span></div><div class="line">                <span class="keyword">char</span> ichar = key.charAt(<span class="number">0</span>);</div><div class="line">                Object value=m.get(key);</div><div class="line">                <span class="keyword">if</span>(ichar &gt;= <span class="string">'A'</span> &amp;&amp; ichar &lt;= <span class="string">'Z'</span>)&#123;</div><div class="line">                    key= key.toLowerCase();</div><div class="line">                &#125;</div><div class="line">                newMap.put(key, value);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> (T)newMap;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toLowcase</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</div><div class="line">        List&lt;T&gt; newList=<span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line">        <span class="comment">//将大写改成小写</span></div><div class="line">        <span class="keyword">for</span>(T t:list)&#123;</div><div class="line">            <span class="keyword">if</span>(t <span class="keyword">instanceof</span> Map)&#123;</div><div class="line"></div><div class="line">                newList.add(objToLowcase(t));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> list;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> newList;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>该方式的弊端是，如果该CRUD通用类新增新的selectXXX方法，都必须引入上面的toLowcase或者objToLowcase，万一以后方法多了或者又改其他数据库了，这个通用类都得改。因此想在更底层一点做统一处理较好，查看了pageHelper插件的源码，发现pageHelper类封装Page用的就是拦截器，它拦截的是Executor类的query方法，于是模仿插件的方式自己改造了一下。</p><h2 id="2-2-使用拦截器方式（较好"><a href="#2-2-使用拦截器方式（较好" class="headerlink" title="2.2 使用拦截器方式（较好)"></a>2.2 使用拦截器方式（较好)</h2><p>我拦截的是ResultSetHandler类handleResultSets的返回，一般都是在参数层做处理。但没必要。上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = ResultSetHandler.class,</div><div class="line">            args = &#123;Statement.class&#125;, method = <span class="string">"handleResultSets"</span>)&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleResultSetInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"><span class="comment">//        Object[] args = invocation.getArgs();</span></div><div class="line"><span class="comment">//        Statement statement = (Statement) args[0];</span></div><div class="line"><span class="comment">//        ResultSet rs = statement.getResultSet();</span></div><div class="line"><span class="comment">//        if (null != rs &amp;&amp; rs.next())&#123;</span></div><div class="line"><span class="comment">//            ResultSetMetaData metaData = rs.getMetaData();</span></div><div class="line"><span class="comment">//            System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@metaData: " + metaData.getColumnCount());</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">        * 只需要在方法执行返回时统一封装修改Map的key为小写就ok</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        Object o = invocation.proceed();</div><div class="line">        System.out.println(<span class="string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@ivt before:"</span> + o);</div><div class="line">        o = toLowcase((List)o);</div><div class="line">        System.out.println(<span class="string">"@@@@@@@@@@@@@@@@@@@@@@@@@@@ivt after:"</span> + o);</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>然后在mybatis-config.xml的plugin标签添加该拦截器或者在MybatisConfiguration类添加，推荐后者，上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">logger.debug(<span class="string">"--&gt; sqlSessionFactory"</span>);</div><div class="line"><span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">sqlSessionFactory.setDataSource(dataSource());</div><div class="line">sqlSessionFactory.setConfigLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">"mybatis-config.xml"</span>));</div><div class="line"><span class="comment">//Properties properties = new Properties();</span></div><div class="line"><span class="comment">//properties.setProperty("cacheEnabled", "true");</span></div><div class="line"><span class="comment">//properties.setProperty("callSettersOnNulls", "true");</span></div><div class="line"><span class="comment">//properties.setProperty("logImpl", "STDOUT_LOGGING");</span></div><div class="line"><span class="comment">//sqlSessionFactory.setConfigurationProperties(properties);</span></div><div class="line"></div><div class="line">sqlSessionFactory.setFailFast(<span class="keyword">true</span>);</div><div class="line"><span class="comment">//sqlSessionFactory.setTypeAliasesPackage("com.platform.model");//每一张表对应的实体类</span></div><div class="line">sqlSessionFactory.setMapperLocations(getResource(<span class="string">"mapper"</span>, <span class="string">"**/*.xml"</span>));</div><div class="line">sqlSessionFactory.setPlugins(<span class="keyword">new</span> Interceptor[]&#123;<span class="keyword">new</span> OracleResultSetInterceptor()&#125;);</div><div class="line"></div><div class="line">SqlSessionFactory object = sqlSessionFactory.getObject();</div><div class="line"><span class="comment">//org.apache.ibatis.session.Configuration config = object.getConfiguration();</span></div><div class="line"><span class="comment">//config.setLogImpl(StdOutImpl.class);</span></div><div class="line"><span class="comment">//config.setCallSettersOnNulls(true);</span></div><div class="line"><span class="keyword">return</span> object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ok, 大功告成，这样就比之前在封装的CURD类中修改更好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题&quot;&gt;&lt;a href=&quot;#1-问题&quot; class=&quot;headerlink&quot; title=&quot;1.问题&quot;&gt;&lt;/a&gt;1.问题&lt;/h1&gt;&lt;p&gt;项目中使用了Oracle数据库改造之前mysql的项目，由于之前的sql映射xml并不是全实体映射的，大部分使用result
      
    
    </summary>
    
    
      <category term="mybatis, oracle, 拦截器" scheme="https://845146913.github.io/tags/mybatis-oracle-%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python进行tomcat日志过滤</title>
    <link href="https://845146913.github.io/2019/03/09/python%E6%97%A5%E5%BF%97%E8%BF%87%E6%BB%A4/"/>
    <id>https://845146913.github.io/2019/03/09/python日志过滤/</id>
    <published>2019-03-09T01:23:59.000Z</published>
    <updated>2019-03-11T16:28:12.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤Catalina-out的指定错误日志"><a href="#过滤Catalina-out的指定错误日志" class="headerlink" title="过滤Catalina.out的指定错误日志"></a>过滤Catalina.out的指定错误日志</h2><p>  比如需要筛选出所有的“xxx参数错误”, 如果日志文件是规范输出的（意思是错误打印时，有详细的参数信息，同一行打印完毕）则比较好做，否则需要多次过滤.</p><p>贴一串python处理代码:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main1</span><span class="params">()</span>:</span></div><div class="line"><span class="comment"># 保存的list数据</span></div><div class="line">datas = list()</div><div class="line"></div><div class="line"><span class="comment"># 临时变量</span></div><div class="line">data = <span class="string">""</span></div><div class="line">i = <span class="number">0</span></div><div class="line">filePath = <span class="string">"D://catalina.out"</span></div><div class="line">dataTimes = filter_data1(filePath, <span class="string">r'返回结果：&#123;"message":"号牌号码、号牌种类或发动机号错误"&#125;'</span>)</div><div class="line"><span class="comment"># for ind,t in enumerate(dataTimes):</span></div><div class="line"><span class="comment"># if t == dataTimes[ind+1]:</span></div><div class="line"><span class="comment"># print("%s========%s " %(t, dataTimes[ind+1]))</span></div><div class="line">f = open(filePath,<span class="string">"r"</span>, encoding=<span class="string">'UTF-8'</span>)</div><div class="line"><span class="keyword">with</span> f:</div><div class="line">line = f.readline()</div><div class="line"><span class="keyword">while</span> line:</div><div class="line">ind1 = line.find(<span class="string">r"queryVehicleViolation============paramJson==========&#123;"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> ind1 &gt; <span class="number">-1</span>:</div><div class="line">dataTime = line[<span class="number">0</span>:<span class="number">19</span>]</div><div class="line"><span class="keyword">if</span> dataTime <span class="keyword">in</span> dataTimes:</div><div class="line"><span class="comment"># i += 1</span></div><div class="line"><span class="comment"># print("ind1: %d, contains: %s, index:%d, time:%s" %(ind1, dataTime in dataTimes, i, dataTime))</span></div><div class="line">data = line[ind1:line.index(<span class="string">"&#125;"</span>)+<span class="number">1</span>]</div><div class="line">data = data[data.index(<span class="string">"&#123;"</span>):]</div><div class="line">datas.append(json.loads(data))</div><div class="line"><span class="comment"># print("---------- data：%s" %data)</span></div><div class="line">line = f.readline()</div><div class="line">print(<span class="string">"result: %d"</span> %(len(datas)))</div><div class="line"><span class="keyword">return</span> datas</div><div class="line"><span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_data1</span><span class="params">(filePath, err_code)</span>:</span></div><div class="line"><span class="string">'''筛选报错数据行'''</span></div><div class="line">dataTimes = list()</div><div class="line"><span class="comment"># dataTimes = set()</span></div><div class="line"><span class="keyword">if</span> err_code != <span class="keyword">None</span> <span class="keyword">and</span> err_code != <span class="string">''</span>:</div><div class="line">f = open(filePath,<span class="string">"r"</span>, encoding=<span class="string">'UTF-8'</span>)</div><div class="line"><span class="keyword">with</span> f:</div><div class="line">line = f.readline()</div><div class="line"><span class="keyword">while</span> line:</div><div class="line"><span class="comment"># print(line)</span></div><div class="line">line = str(line)</div><div class="line">ind1 = line.find(<span class="string">r""</span> + err_code)</div><div class="line"><span class="keyword">if</span> ind1 &gt; <span class="number">-1</span>:</div><div class="line"><span class="comment"># 截取出时间</span></div><div class="line">dateTime1 = line[<span class="number">0</span>:<span class="number">19</span>]</div><div class="line">dataTimes.append(dateTime1)</div><div class="line"><span class="comment"># dataTimes.add(dateTime1)</span></div><div class="line">line = f.readline()</div><div class="line">print(len(dataTimes))</div><div class="line"><span class="keyword">return</span> dataTimes</div></pre></td></tr></table></figure></p><p>筛选完数据就完成了。多次过滤的唯一判断条件是打印的日志时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;过滤Catalina-out的指定错误日志&quot;&gt;&lt;a href=&quot;#过滤Catalina-out的指定错误日志&quot; class=&quot;headerlink&quot; title=&quot;过滤Catalina.out的指定错误日志&quot;&gt;&lt;/a&gt;过滤Catalina.out的指定错误日志&lt;/
      
    
    </summary>
    
    
      <category term="日志过滤,数据清理" scheme="https://845146913.github.io/tags/%E6%97%A5%E5%BF%97%E8%BF%87%E6%BB%A4-%E6%95%B0%E6%8D%AE%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CefSharp基于chromium内核启用摄像头</title>
    <link href="https://845146913.github.io/2019/03/02/CefSharp/"/>
    <id>https://845146913.github.io/2019/03/02/CefSharp/</id>
    <published>2019-03-02T02:17:20.000Z</published>
    <updated>2019-03-11T16:27:41.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-winform使用CefSharp"><a href="#C-winform使用CefSharp" class="headerlink" title="C# winform使用CefSharp"></a>C# winform使用CefSharp</h1><p>winform的Webbrowser控件默认使用的是Ie内核，会出现很多的兼容性问题，比如调用摄像头等需要使用ativeX实现，效果不好，对html5支持不足。</p><p>考虑到网页启用摄像头的需求，决定摈弃activeX方案，采用html5的原生支持。因此，引入CefSharp.Winform插件，本例使用的是51.x的版本，.net framework 4.5.2</p><p>引入插件成功后，调用示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 浏览器对象</div><div class="line">public ChromiumWebBrowser browser;</div><div class="line"></div><div class="line">// uri     192.168.31.237:8080/portal/index</div><div class="line">// www.baidu.com</div><div class="line">browser = new ChromiumWebBrowser(&quot;http://localhost:8080/camera.html&quot;)</div><div class="line">&#123;</div><div class="line">    Dock = DockStyle.Fill</div><div class="line">&#125;;</div><div class="line">this.Controls.Add(browser);</div></pre></td></tr></table></figure></p><p>Pragram.cs Main方法添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CefExample.Init();</div></pre></td></tr></table></figure></p><p>CefExample.cs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class CefExample</div><div class="line">    &#123;</div><div class="line">        public static void Init()</div><div class="line">        &#123;</div><div class="line">            CefSettings settings = new CefSettings();</div><div class="line">            settings.CefCommandLineArgs.Add(&quot;enable-media-stream&quot;, &quot;1&quot;); // 开启摄像头权限</div><div class="line">            settings.IgnoreCertificateErrors = true;</div><div class="line">            settings.LogSeverity = LogSeverity.Verbose;</div><div class="line">            </div><div class="line">            // 以下代码必不可少否则可能出现加载不成功现象</div><div class="line">            if (!Cef.Initialize(settings))</div><div class="line">            &#123;</div><div class="line">                if (Environment.GetCommandLineArgs().Contains(&quot;--type=renderer&quot;))</div><div class="line">                &#123;</div><div class="line">                    Environment.Exit(0);</div><div class="line">                &#125;</div><div class="line">                else</div><div class="line">                &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>html5页面样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;button id=&quot;run&quot;&gt;开启网络摄像头&lt;/button&gt;</div><div class="line">&lt;Br/&gt;</div><div class="line">&lt;video id=&quot;webcam&quot;&gt;&lt;/video&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    navigator.getUserMedia || (navigator.getUserMedia = navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia);</div><div class="line"></div><div class="line">    if (!navigator.getUserMedia) &#123;</div><div class="line">        alert(&quot;您的浏览器不支持&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var btn = document.getElementById(&apos;run&apos;);</div><div class="line">    btn.onclick = startWebcam;</div><div class="line"></div><div class="line">    function startWebcam(e) &#123;</div><div class="line">        navigator.getUserMedia(&#123;</div><div class="line">            video: true,</div><div class="line">            audio: true</div><div class="line">        &#125;, onSuccess, onError);</div><div class="line"></div><div class="line">        function onSuccess(stream) &#123;</div><div class="line"></div><div class="line">            var video = document.getElementById(&apos;webcam&apos;);</div><div class="line"></div><div class="line">            if (window.URL) &#123;</div><div class="line">                try &#123;</div><div class="line">                    video.src = window.URL.createObjectURL(stream);</div><div class="line">                &#125; catch (e) &#123;</div><div class="line">                    video.srcObject = stream;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                video.srcObject = stream;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            video.autoplay = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        function onError() &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>附加实现窗体全屏代码，在需要全屏的Form初始化方法里加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 实现窗体全屏</div><div class="line">this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;</div><div class="line">this.WindowState = System.Windows.Forms.FormWindowState.Maximized;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-winform使用CefSharp&quot;&gt;&lt;a href=&quot;#C-winform使用CefSharp&quot; class=&quot;headerlink&quot; title=&quot;C# winform使用CefSharp&quot;&gt;&lt;/a&gt;C# winform使用CefSharp&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="CefSharp,C#, Winform" scheme="https://845146913.github.io/tags/CefSharp-C-Winform/"/>
    
  </entry>
  
  <entry>
    <title>Java Enums扩展</title>
    <link href="https://845146913.github.io/2018/04/22/enums/"/>
    <id>https://845146913.github.io/2018/04/22/enums/</id>
    <published>2018-04-22T13:02:48.000Z</published>
    <updated>2018-04-22T13:17:20.840Z</updated>
    
    <content type="html"><![CDATA[<p>正文：</p><p>Enum的使用能优化代码结构，替代了传统的 public static final 常量。代码更简洁。<br>  例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TestEnum &#123;</div><div class="line">  A,B,C;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>enum默认提供了两个final变量name, ordinal(下标，默认从0开始). enum类还提供valueOf(Class<e> e, String name)静态方法获取枚举对象。<br>实际使用中我们会碰到特殊情况，希望保存下标是我们自定义的值呢，然后通过自定义值类似下标获取枚举对象呢。通常我们写法是：</e></p><h3 id="一、改造前"><a href="#一、改造前" class="headerlink" title="一、改造前"></a>一、改造前</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> VehicleSeatEnum &#123;</div><div class="line">五座及以下(<span class="number">5</span>),</div><div class="line">六到八座(<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">VehicleSeatEnum(<span class="keyword">int</span> v)&#123;</div><div class="line"><span class="keyword">this</span>.value = v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">value</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line"><span class="keyword">for</span> (VehicleSeatEnum c : VehicleSeatEnum.values()) &#123;  </div><div class="line">            <span class="keyword">if</span> (c.value == i) &#123;  </div><div class="line">                <span class="keyword">return</span> c.name();  </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(i &lt; <span class="number">6</span>) &#123; <span class="comment">// 特殊处理</span></div><div class="line">            <span class="keyword">return</span> value(<span class="number">5</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> value(<span class="number">6</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然而静态方法value(int i)获取枚举对象必须在每一个枚举类添加，代码冗余.但enum对象不能继承其他类.改造如下：</p><h4 id="1-使用map做缓存。"><a href="#1-使用map做缓存。" class="headerlink" title="1.使用map做缓存。"></a>1.使用map做缓存。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericEnum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;?&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">static</span> Map&lt;String, Enum&lt;?&gt;&gt; map = Maps.newConcurrentMap();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * name()</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">default</span> E <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">E e = (E)<span class="keyword">this</span>;</div><div class="line"><span class="keyword">return</span> e;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * value()</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Object <span class="title">value</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * desc()</span></div><div class="line"><span class="comment"> * default name()</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">desc</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.get().name();</div><div class="line">&#125;</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">E <span class="title">get</span><span class="params">(Class&lt;E&gt; clazz, Object i)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == i || <span class="string">""</span>.equals(i))</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">String key = clazz.getName() + <span class="string">"_"</span> + i;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">for</span>(Field f : clazz.getDeclaredFields()) &#123;</div><div class="line"><span class="keyword">if</span>(!f.isEnumConstant() &amp;&amp; !f.getType().getTypeName().contains(clazz.getName()))</div><div class="line">count ++;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (SecurityException e1) &#123;</div><div class="line">e1.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(map.containsKey(key))</div><div class="line"><span class="keyword">return</span> (E) map.get(key);</div><div class="line"><span class="keyword">for</span>(E o : clazz.getEnumConstants()) &#123;</div><div class="line"><span class="keyword">if</span>( count &gt; <span class="number">0</span>) &#123;</div><div class="line">GenericEnum&lt;E&gt; e = (GenericEnum&lt;E&gt;) o;</div><div class="line">map.put(clazz.getName() + <span class="string">"_"</span> + e.value(), o);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">map.put(clazz.getName() + <span class="string">"_"</span> + o.ordinal(), o);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(map.get(key) == <span class="keyword">null</span>) </div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"No enum constant "</span> + clazz.getName() + <span class="string">"."</span> + i);</div><div class="line"><span class="keyword">return</span>  (E)map.get(key);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-不使用map缓存方式。"><a href="#2-不使用map缓存方式。" class="headerlink" title="2.不使用map缓存方式。"></a>2.不使用map缓存方式。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericEnum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * E</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> E</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">default</span> E <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">E e = (E)<span class="keyword">this</span>;</div><div class="line"><span class="keyword">return</span> e;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * value()</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function">Object <span class="title">value</span><span class="params">()</span></span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * desc()</span></div><div class="line"><span class="comment"> * default name()</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">desc</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.get().name();</div><div class="line">&#125;</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">E <span class="title">get</span><span class="params">(Class&lt;E&gt; clazz, Object i)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == i || <span class="string">""</span>.equals(i))</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">for</span>(Field f : clazz.getDeclaredFields()) &#123;</div><div class="line"><span class="keyword">if</span>(!f.isEnumConstant() &amp;&amp; !f.getType().getTypeName().contains(clazz.getName()))</div><div class="line">count ++;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (SecurityException e1) &#123;</div><div class="line">e1.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(E e : clazz.getEnumConstants()) &#123;</div><div class="line"><span class="keyword">if</span> ( count &gt; <span class="number">0</span> ) &#123;</div><div class="line">GenericEnum&lt;E&gt; o = (GenericEnum&lt;E&gt;) e;</div><div class="line"><span class="keyword">if</span>( Objects.equals(o.value(), i) )</div><div class="line"><span class="keyword">return</span> e;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(e.ordinal(), i)) &#123;</div><div class="line"><span class="keyword">return</span> e;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">        <span class="string">"No enum constant "</span> + clazz.getName() + <span class="string">"."</span> + i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二-改造后"><a href="#二-改造后" class="headerlink" title="二.改造后"></a>二.改造后</h3><p>使用时只需要enum实现GenericEnum接口.如下：<br>多个参数都适用.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TestEnum &#123;</div><div class="line">  A,B,C;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MyTypeEnum implements GenericEnum&lt;MyTypeEnum&gt; &#123;</div><div class="line"></div><div class="line">TEST(<span class="string">"1"</span>),</div><div class="line">DEV(<span class="string">"2"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> Object value;</div><div class="line">MyTypeEnum(Object i)&#123;</div><div class="line"><span class="keyword">this</span>.value = i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TwoEnum implements GenericEnum&lt;TwoEnum&gt; &#123;</div><div class="line">LIKE(<span class="number">1</span>,<span class="string">"喜欢"</span>),</div><div class="line">DONLIKE(<span class="number">2</span>,<span class="string">"不喜欢"</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line"><span class="keyword">private</span> String desc;</div><div class="line"></div><div class="line">TwoEnum(<span class="keyword">int</span> val, String des) &#123;</div><div class="line"><span class="keyword">this</span>.value = val;</div><div class="line"><span class="keyword">this</span>.desc = des;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">value</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">desc</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>.desc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(GenericEnum.get(MyTypeEnum.class, <span class="string">"2"</span>));</div><div class="line">System.out.println(GenericEnum.get(TwoEnum.class, <span class="number">2</span>).desc());</div><div class="line">System.out.println(GenericEnum.get(TestEnum.class, <span class="number">2</span>));</div><div class="line">System.out.println(Enum.valueOf(MyTypeEnum.class, <span class="string">"TEST"</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>OK. 大功告成.如果需要持久化（hibernate或者mybatis）,所有enum类都实现该接口.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正文：&lt;/p&gt;
&lt;p&gt;Enum的使用能优化代码结构，替代了传统的 public static final 常量。代码更简洁。&lt;br&gt;  例如：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="enum,持久化,mybatis,hibernate" scheme="https://845146913.github.io/tags/enum-%E6%8C%81%E4%B9%85%E5%8C%96-mybatis-hibernate/"/>
    
  </entry>
  
  <entry>
    <title>springCloud整理</title>
    <link href="https://845146913.github.io/2018/03/12/springCloud%E6%95%B4%E7%90%86/"/>
    <id>https://845146913.github.io/2018/03/12/springCloud整理/</id>
    <published>2018-03-12T01:30:02.000Z</published>
    <updated>2019-03-11T16:31:39.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RIBBON："><a href="#RIBBON：" class="headerlink" title="RIBBON："></a>RIBBON：</h2><pre><code>基于http和tcp的客户端负载均衡工具，基于Netflix ribbon实现。通过restTemplate对象使用ribbon的自动化配置，同时配置@LoadBalanced 还能开启客户端负载均衡。1.restTemplate的几种服务调用实现：    1.get请求  getForEntity和getForObject,getForObject是对前者的封装。    2.post请求  postForEntity和postForObject、postForLocation（该方法实现以post请求提交资源，并返回新资源的uri）；    3.put请求     4.delete请求2.负载均衡机制：    ......3.重试机制：默认是关闭的，    要开启spring.cloud.loadbalancer.retry.enabled=true    ......</code></pre><h2 id="Hystrix："><a href="#Hystrix：" class="headerlink" title="Hystrix："></a>Hystrix：</h2><pre><code>具备服务降级、服务熔断、线程和信号隔离、请求缓存、请求合并以及服务监控等功能。1.与ribbon结合使用。在消费者端主类使用@EnableCircuitBreaker注解启动断路器功能，ribbon开启客户端负载均衡。可以使用@SpringCloudApplication修饰主类它包含服务发现和断路器。2.改造服务消费方式，在调用服务的类方法上增加@HystrixCommand注解来指定毁掉方法：如：    @HystrixCommand(fallbackMethod = &quot;fallbackM&quot;)    public String testService(){        return restTemplate.getForObject(....);    }    public String fallbackM(){        return &quot;error:&quot;;    }3.工作流程    1.创建HystrixCommand或HystrixObservableCommand对象    2.命令执行        HystrixCommand两种执行方式：execute()同步执行、queue()异步执行.        HystrixObservableCommand两种执行方式：observe()、toObservable()    3.结果是否被缓存    4.断路器是否打开        打开--&gt;Hystrix不会执行命令，转接到fallback处理逻辑        关闭--&gt;检查是否有可用资源来执行命令。    5.线程池/请求队列/信号量是否占满        满--&gt;转接fallback处理逻辑    6.HystrixObservableCommand.construct()或HystrixCommand.run()        HystrixCommand.run():返回一个单一的结果，或者抛出异常        HystrixObservableCommand.construct()：返回一个Observable对象来发射多个结果，或通过onError发送错误通知。    7.计算断路器的健康度    8.fallback处理        也称服务降级    9.返回成功的响应4.使用HystrixCommand来封装具体的依赖服务调用逻辑（一种是继承方式、一种是@HystrixCommand注解）5.定义降级服务6.异常处理7.命令名称、分组以及线程池划分8.请求缓存（HystrixCommand.getCacheKey()）    注解方式实现请求缓存（@CacheResult、@CacheRemove、@CacheKey）    缓存清理的方式：@CacheRemove(commandKey = &quot;methodName&quot;) 方法体结合@CacheKey(&quot;id&quot;)使用。9.请求合并（HystrixCollapser）    注解方式实现合并    @HystrixCollapser(batchMethod = &quot;findAll&quot;, collapserProperties = {        @HystrixProperty(name = &quot;timeDelayInMilliseconds&quot;,value = &quot;100&quot;)})    public User find(Long id){        return null;    }    @HystrixCommand    public List&lt;User&gt; findAll(List&lt;Long&gt; ids){        return restTemplate.getForObject(.....);    }Hystrix仪表盘Dashboard    Turbine集群监控    消息代理 rabbitMQ</code></pre><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign:"></a>Feign:</h2><pre><code>整合了spring cloud ribbon和spring cloud Hystrix；还提供了声明式的Web服务客户端定义方式。1.简单使用：    1.主类 @EnabledFeignClients @EnableDiscoveryClient    2.定义接口时 @FeignClient(value=&quot;providerName&quot;)        接口中通过@RequestMapping()绑定该服务提供的接口2.参数绑定3.继承特性（简化服务端客户端的复制操作），可以建立一个基础的maven工程将能够复用的DTO与接口定义，然后在provider和consumer项目引入该项目的依赖。注意：共享的接口改变时的问题4.重试机制5.histrix配置    feign.hystrix.enabled=false关闭Hystrix功能    hystrix.command.default.execution.timeout.enabled=false关闭熔断功能。</code></pre><p>注意:1.通常不建议在服务器和客户端之间共享接口。它引入紧耦合，并且实际上不能以当前形式的Spring MVC（方法参数映射不被继承）起作用。<br> 2.同时使用继承特性和Hystrix回调（或者称服务降级）时，不能在公共接口类中使用@RequestMapping，因为客户端会去继承公共接口类并使用@FeignClient注解，但是这是不允许的，如果使用fallback会出现如下情况。Ambiguous mapping.有歧义的映射类</p><p>替代方案是在服务端实现公共接口类中定义@RequestMapping，从而避免在同一个接口类中同时使用@RequestMapping、@FeignClient</p><h2 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth:"></a>Spring Cloud Sleuth:</h2><pre><code>分布式服务跟踪：    traceId：服务跟踪的唯一标识，通过traceId我们就能将所有请求过程的日志关联起来。    spanId:为了统计各处理单元的时间延迟，即时间戳记录</code></pre><h2 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul:"></a>Zuul:</h2><p>API网关，过滤器机制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RIBBON：&quot;&gt;&lt;a href=&quot;#RIBBON：&quot; class=&quot;headerlink&quot; title=&quot;RIBBON：&quot;&gt;&lt;/a&gt;RIBBON：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;基于http和tcp的客户端负载均衡工具，基于Netflix ribbon实现。
通
      
    
    </summary>
    
    
      <category term="之前的笔记整理" scheme="https://845146913.github.io/tags/%E4%B9%8B%E5%89%8D%E7%9A%84%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="https://845146913.github.io/2018/01/18/pythonRecord/"/>
    <id>https://845146913.github.io/2018/01/18/pythonRecord/</id>
    <published>2018-01-18T11:25:28.000Z</published>
    <updated>2018-01-18T11:34:55.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python笔记"><a href="#python笔记" class="headerlink" title="python笔记"></a>python笔记</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>))</div><div class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)</div><div class="line">s1 = <span class="number">72</span></div><div class="line">s2 = <span class="number">85</span></div><div class="line">r = (<span class="number">85</span><span class="number">-72</span>)/<span class="number">72</span>*<span class="number">100</span></div><div class="line">print(<span class="string">'设置：'</span>,<span class="string">'%04.2f %%'</span> % (r))</div><div class="line"><span class="comment"># 2.list[]、tuple()</span></div><div class="line">classmates = [<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</div><div class="line">print(classmates,len(classmates))</div><div class="line"><span class="keyword">for</span> str <span class="keyword">in</span> classmates:</div><div class="line">print(str)</div><div class="line">print(<span class="string">'----------------------------------'</span>)</div><div class="line">classmates.insert(<span class="number">1</span>,<span class="string">'Test'</span>)</div><div class="line">classmates.append(<span class="string">'Mike'</span>)</div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> i &lt; len(classmates):</div><div class="line">print(classmates[i])</div><div class="line">i = i + <span class="number">1</span></div><div class="line">classmates.pop()</div><div class="line">classmates.pop(<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> res <span class="keyword">in</span> classmates:</div><div class="line"><span class="keyword">if</span> res == <span class="string">'Michael'</span>:</div><div class="line">print(<span class="string">'result: %s'</span> % res)</div><div class="line">print(<span class="string">'END'</span>)</div><div class="line">finallist = (<span class="string">'Mspaint'</span>,<span class="string">'Mscmd'</span>,<span class="string">'Msservices'</span>)</div><div class="line"><span class="comment"># no finallist.insert(1,'Msddd')</span></div><div class="line"><span class="comment"># no finallist.append('Dss')</span></div><div class="line">print(<span class="string">'tuple:'</span>, finallist)</div><div class="line">print(<span class="string">'----------------------------------'</span>)</div><div class="line"><span class="comment"># 3. dict&#123;&#125;、set</span></div><div class="line">map = &#123;<span class="string">'A'</span>:<span class="number">90</span>, <span class="string">'B'</span>:<span class="number">80</span>, <span class="string">'C'</span>:<span class="number">70</span>&#125;</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> map:</div><div class="line">print(<span class="string">'key:'</span>,m,<span class="string">' val:'</span>, map.get(m))</div><div class="line"><span class="keyword">if</span> <span class="string">'A'</span> <span class="keyword">in</span> map:</div><div class="line">print(<span class="string">'&gt;&gt;&gt;&gt;'</span>)</div><div class="line">map[<span class="string">'A'</span>] = <span class="number">95</span></div><div class="line"><span class="keyword">if</span> map.get(<span class="string">'D'</span>, <span class="number">-1</span>) == <span class="number">-1</span>:</div><div class="line">print(<span class="string">'&gt;&gt;&gt;&gt;&gt;D:'</span>)</div><div class="line">map[<span class="string">'D'</span>] = <span class="number">60</span></div><div class="line">print(<span class="string">'resMap:'</span>, map)</div><div class="line">map.pop(<span class="string">'A'</span>)</div><div class="line">print(<span class="string">'resMap2:'</span>, map)</div><div class="line"></div><div class="line">myset = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">myset.add(<span class="number">6</span>)</div><div class="line">myset.add(<span class="number">7</span>)</div><div class="line">myset.remove(<span class="number">3</span>)</div><div class="line">print(<span class="string">'myset:'</span>, myset) </div><div class="line">set2 = set([<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>])</div><div class="line">print(<span class="string">'set2&amp;set1:'</span>, myset &amp; set2, myset | set2)</div><div class="line">print(<span class="string">'----------------------------------'</span>)</div><div class="line"></div><div class="line"></div><div class="line">name = input(<span class="string">'按任意键退出...'</span>)</div><div class="line">print(<span class="string">'end'</span>,name)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python笔记&quot;&gt;&lt;a href=&quot;#python笔记&quot; class=&quot;headerlink&quot; title=&quot;python笔记&quot;&gt;&lt;/a&gt;python笔记&lt;/h1&gt;&lt;h2 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://845146913.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java8对字符串的操作</title>
    <link href="https://845146913.github.io/2017/11/15/record1/"/>
    <id>https://845146913.github.io/2017/11/15/record1/</id>
    <published>2017-11-15T15:16:54.000Z</published>
    <updated>2017-11-15T15:18:55.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java8对字符串的操作"><a href="#java8对字符串的操作" class="headerlink" title="java8对字符串的操作"></a>java8对字符串的操作</h1><h2 id="1-把list里面的对象id转入Set"><a href="#1-把list里面的对象id转入Set" class="headerlink" title="1.把list里面的对象id转入Set"></a>1.把list里面的对象id转入Set</h2><p>map返回的Stream类型是根据你map传递进去的函数的返回值决定的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Set&lt;Long&gt; ids = list.stream()</div><div class="line">.map(SearchItem::getPt_id)</div><div class="line">.collect(Collectors.toSet());</div></pre></td></tr></table></figure></p><h2 id="2-对字符串连接的操作。"><a href="#2-对字符串连接的操作。" class="headerlink" title="2.对字符串连接的操作。"></a>2.对字符串连接的操作。</h2><pre><code>2.1 java8之前使用StringBuilder来拼接。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToString</span><span class="params">(List&lt;String&gt; list, String delimiter)</span> </span>&#123;</div><div class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (String str : list) &#123;</div><div class="line">        result.append(str).append(delimiter);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 删除末尾多余的 delimiter</span></div><div class="line">    result.delete(result.length() - delimiter.length(), result.length()); </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure><pre><code>2.2 或者使用toString()字符串截取.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">ls.add(<span class="string">"1231"</span>);</div><div class="line">ls.add(<span class="string">"erer"</span>);</div><div class="line">String d = <span class="string">"1234"</span>+<span class="string">","</span>+<span class="string">"erer"</span>;</div><div class="line">String res = ls.toString();</div><div class="line">System.err.println(<span class="string">"ls:"</span>+res.substring(<span class="number">1</span>,res.length()-<span class="number">1</span>).replace(<span class="string">" "</span>, <span class="string">""</span>));</div></pre></td></tr></table></figure><pre><code>2.3 然而在java8提供了几种方式。通过新引入的StringJoiner类,构造方法有一、三个参数可选(delimiter, prefix, suffix)。实现方式1：String.join()</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.join(delimiter, list);</div></pre></td></tr></table></figure><pre><code>实现方式2: StringJoiner 替代 listToString(...)的StringBuilder简化代码.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StringJoiner result = <span class="keyword">new</span> StringJoiner(delimiter);</div><div class="line">    <span class="keyword">for</span> (String str : list) &#123;</div><div class="line">        result.add(str);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">return</span> result.toString();</div></pre></td></tr></table></figure><pre><code>实现方式3:使用stream流操作Collections.joining()方式。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String string = ls.stream().collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">String string = ls.stream().collect(Collectors.joining());</div><div class="line">String string = ls.stream().collect(Collectors.joining(<span class="string">","</span>, <span class="string">"&#123;"</span>, <span class="string">"&#125;"</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java8对字符串的操作&quot;&gt;&lt;a href=&quot;#java8对字符串的操作&quot; class=&quot;headerlink&quot; title=&quot;java8对字符串的操作&quot;&gt;&lt;/a&gt;java8对字符串的操作&lt;/h1&gt;&lt;h2 id=&quot;1-把list里面的对象id转入Set&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="开发随笔" scheme="https://845146913.github.io/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Singleton</title>
    <link href="https://845146913.github.io/2017/11/10/singleton/"/>
    <id>https://845146913.github.io/2017/11/10/singleton/</id>
    <published>2017-11-10T12:47:23.000Z</published>
    <updated>2017-11-10T12:48:14.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h2><p>   会随着类初始化时，实例化。天生线程安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();  </div><div class="line">    <span class="comment">//静态工厂方法   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> single;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h2><pre><code>懒汉式即在需要的时候才实例化。在java多线程并发中得考虑安全问题。因此下面是比较好的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span> (Singleton2.class) &#123;</div><div class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)</div><div class="line">instance = <span class="keyword">new</span> Singleton2();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-使用Enum枚举类创建单例"><a href="#3-使用Enum枚举类创建单例" class="headerlink" title="3.使用Enum枚举类创建单例"></a>3.使用Enum枚举类创建单例</h2><pre><code>此方式开发中很少有人用。其实这种方式更好。天生线程安全。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> EnumSingle.instance.instance();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">enum</span> EnumSingle&#123;</div><div class="line">instance;</div><div class="line"><span class="keyword">private</span> Singleton single;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">EnumSingle</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"EnumSingle:"</span>+single);</div><div class="line">single = <span class="keyword">new</span> Singleton();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> Singleton <span class="title">instance</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"instance-&gt;"</span>+single);</div><div class="line"><span class="keyword">return</span> single;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="注：如果利用java反射，能破坏单例特性。"><a href="#注：如果利用java反射，能破坏单例特性。" class="headerlink" title="注：如果利用java反射，能破坏单例特性。"></a>注：如果利用java反射，能破坏单例特性。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;h2 id=&quot;1-饿汉式&quot;&gt;&lt;a href=&quot;#1-饿汉式&quot; class=&quot;headerlink&quot; title=&quot;1.饿汉式&quot;&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://845146913.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java8</title>
    <link href="https://845146913.github.io/2017/11/03/java8/"/>
    <id>https://845146913.github.io/2017/11/03/java8/</id>
    <published>2017-11-02T16:01:00.000Z</published>
    <updated>2017-11-02T16:05:09.648Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprSolrDemoApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//1.java8 lamdba表達式</span></div><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"apple"</span>, <span class="string">"peace"</span>, <span class="string">"tomato"</span>, <span class="string">"pertato"</span>);</div><div class="line">list.sort((a, b) -&gt; a.compareTo(b));</div><div class="line">System.out.println(list);</div><div class="line">list = Arrays.asList(<span class="string">"cenate"</span>,<span class="string">"ffidt"</span>, <span class="string">"egssg"</span>);</div><div class="line">Collections.sort(list, (a, b) -&gt; b.compareTo(a));</div><div class="line">System.out.println(list);</div><div class="line">Converter&lt;String, Integer&gt; con = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//2.函数式接口</span></div><div class="line">con = (from) -&gt; Integer.valueOf(from);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 2.1 静态方法引用</span></div><div class="line"><span class="comment"> * Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，以下为静态方法</span></div><div class="line"><span class="comment"> */</span></div><div class="line">con = Integer::valueOf;</div><div class="line"><span class="comment">//con = (s)-&gt;s.startsWith("a");</span></div><div class="line">Integer result = con.convert(<span class="string">"123"</span>);</div><div class="line">System.out.println(result);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 2.2 ::构造函数的引用</span></div><div class="line"><span class="comment"> * 使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂</span></div><div class="line"><span class="comment"> * 我们只需要使用 Person::new 来获取Person类构造函数的引用，</span></div><div class="line"><span class="comment"> *  Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line">PersonFactory&lt;Person&gt; personFactory = Person::<span class="keyword">new</span>;</div><div class="line">Person person = personFactory.create(<span class="string">"Wang"</span>, <span class="string">"ShuiPing"</span>);</div><div class="line">System.out.println(person);</div><div class="line"><span class="comment">//3.lambda作用域</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">1</span>;</div><div class="line">Converter&lt;Integer, String&gt; con1 =</div><div class="line">        (from) -&gt; String.valueOf(from + num);</div><div class="line"> </div><div class="line">con1.convert(<span class="number">2</span>);     <span class="comment">// 3, 这里的变量num可以不用声明为final,</span></div><div class="line"><span class="comment">//num = 2; // 这种方法是不允许</span></div><div class="line">System.out.println(con1.convert(<span class="number">2</span>));</div><div class="line"></div><div class="line"><span class="comment">//4. Stream接口 </span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 有串行stream()和并行parallelStream()，后者为多线程处理，速度快于前者</span></div><div class="line"><span class="comment"> * java.util.Stream 表示能应用在一组元素上一次执行的操作序列。</span></div><div class="line"><span class="comment"> * Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，</span></div><div class="line"><span class="comment"> * 而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。</span></div><div class="line"><span class="comment"> * Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，</span></div><div class="line"><span class="comment"> * List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行</span></div><div class="line"><span class="comment"> */</span></div><div class="line">List&lt;String&gt; stringCollection = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringCollection.add(<span class="string">"ddd2"</span>); </div><div class="line">stringCollection.add(<span class="string">"aaa2"</span>);</div><div class="line">stringCollection.add(<span class="string">"bbb1"</span>);</div><div class="line">stringCollection.add(<span class="string">"aaa1"</span>);</div><div class="line">stringCollection.add(<span class="string">"bbb3"</span>);</div><div class="line">stringCollection.add(<span class="string">"ccc"</span>);</div><div class="line">stringCollection.add(<span class="string">"bbb2"</span>);</div><div class="line">stringCollection.add(<span class="string">"ddd1"</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.1 Filter 过滤</span></div><div class="line"><span class="comment"> * 过滤通过一个predicate接口来过滤并只保留符合条件的元素，</span></div><div class="line"><span class="comment"> * 该操作属于中间操作，</span></div><div class="line"><span class="comment"> * 所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。</span></div><div class="line"><span class="comment"> * forEach需要一个函数来对过滤后的元素依次执行。</span></div><div class="line"><span class="comment"> * forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作</span></div><div class="line"><span class="comment"> */</span></div><div class="line">stringCollection.stream()</div><div class="line">.filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</div><div class="line">.forEach(System.out::println);;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.2 Sort 排序</span></div><div class="line"><span class="comment"> * 排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。</span></div><div class="line"><span class="comment"> */</span></div><div class="line">stringCollection.stream()</div><div class="line">.filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</div><div class="line">.sorted()</div><div class="line">.forEach(System.out::println);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.3 Map 映射</span></div><div class="line"><span class="comment"> * 中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，</span></div><div class="line"><span class="comment"> * 下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，</span></div><div class="line"><span class="comment"> * map返回的Stream类型是根据你map传递进去的函数的返回值决定的</span></div><div class="line"><span class="comment"> */</span></div><div class="line">stringCollection</div><div class="line">    .stream()</div><div class="line">    .map(String::toUpperCase)</div><div class="line">    .sorted((a, b) -&gt; b.compareTo(a))</div><div class="line">    .forEach(System.out::println);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.4 Match 匹配</span></div><div class="line"><span class="comment"> * Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">boolean</span> anyStartsWithA = </div><div class="line">    stringCollection</div><div class="line">        .stream() </div><div class="line">        .anyMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));</div><div class="line">System.out.println(anyStartsWithA);      <span class="comment">// true</span></div><div class="line"><span class="keyword">boolean</span> allStartsWithA = </div><div class="line">    stringCollection</div><div class="line">        .stream()</div><div class="line">        .allMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));</div><div class="line">System.out.println(allStartsWithA);      <span class="comment">// false</span></div><div class="line"><span class="keyword">boolean</span> noneStartsWithZ = </div><div class="line">    stringCollection</div><div class="line">        .stream()</div><div class="line">        .noneMatch((s) -&gt; s.startsWith(<span class="string">"z"</span>));</div><div class="line">System.out.println(noneStartsWithZ);      <span class="comment">// true</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.5 Count 计数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">long</span> startsWithB = </div><div class="line">    stringCollection</div><div class="line">        .stream() </div><div class="line">        .filter((s) -&gt; s.startsWith(<span class="string">"b"</span>))</div><div class="line">        .count();</div><div class="line"> </div><div class="line">System.out.println(startsWithB);    <span class="comment">// 3</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.6 Reduce 规约</span></div><div class="line"><span class="comment"> * 规约成一个元素，规越后的结果是通过Optional接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Optional&lt;String&gt; reduced =</div><div class="line">    stringCollection</div><div class="line">        .stream() </div><div class="line">        .sorted()</div><div class="line">        .reduce((s1, s2) -&gt; s1 + <span class="string">"#"</span> + s2);</div><div class="line">reduced.ifPresent(System.out::println);</div><div class="line"><span class="comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * PS：原数据是不会被修改的</span></div><div class="line"><span class="comment"> */</span></div><div class="line">System.out.println(stringCollection);</div><div class="line"><span class="comment">//---------</span></div><div class="line"><span class="keyword">int</span> max = <span class="number">1000000</span>;</div><div class="line">List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(max);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123; </div><div class="line">    UUID uuid = UUID.randomUUID();</div><div class="line">    values.add(uuid.toString());</div><div class="line">&#125;</div><div class="line"><span class="comment">//----stream()</span></div><div class="line"><span class="keyword">long</span> t0 = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">long</span> count = values.stream().sorted().count();</div><div class="line">System.out.println(count);</div><div class="line"><span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"><span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);</div><div class="line">System.out.println(String.format(<span class="string">"sequential sort took: %d ms"</span>, millis));</div><div class="line"><span class="comment">//------parallelStream()</span></div><div class="line"><span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">long</span> count1 = values.parallelStream().sorted().count();</div><div class="line">System.out.println(count1);</div><div class="line"><span class="keyword">long</span> t3 = System.nanoTime();</div><div class="line"><span class="keyword">long</span> millis1 = TimeUnit.NANOSECONDS.toMillis(t3 - t2);</div><div class="line">System.out.println(String.format(<span class="string">"parallel sort took: %d ms"</span>, millis1));</div><div class="line"></div><div class="line"><span class="comment">////5. 对Map的操作</span></div><div class="line">Map&lt;Integer, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">map.putIfAbsent(i, <span class="string">"val"</span> + i);</div><div class="line">&#125;</div><div class="line">map.forEach((key,val)-&gt;&#123;System.out.println(<span class="string">"key:"</span>+key+<span class="string">" val:"</span>+val);&#125;);</div><div class="line">System.out.println(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//2.函数式接口</span></div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//2.2实现构造函数引用 --开始</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    String firstName;</div><div class="line">    String lastName;</div><div class="line"> </div><div class="line">    Person() &#123;&#125;</div><div class="line">    Person(String firstName, String lastName) &#123;</div><div class="line">        <span class="keyword">this</span>.firstName = firstName;</div><div class="line">        <span class="keyword">this</span>.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"Person [firstName="</span> + firstName + <span class="string">", lastName="</span> + lastName + <span class="string">"]"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 指定一个用来创建Person对象的对象工厂接口</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wangshuip</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;P&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;</div><div class="line">    <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//2.2实现构造函数引用 --结束</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
      
    
    </summary>
    
    
      <category term="java8特性" scheme="https://845146913.github.io/tags/java8%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://845146913.github.io/2017/10/26/git/"/>
    <id>https://845146913.github.io/2017/10/26/git/</id>
    <published>2017-10-26T04:48:01.000Z</published>
    <updated>2018-01-18T11:24:12.549Z</updated>
    
    <content type="html"><![CDATA[<p>常用的git指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add -xxx </div><div class="line">git commit -m &quot;XXXX&quot;</div><div class="line">git push -u origin </div><div class="line">git clone [url] yourpathname</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用的git指令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div c
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://845146913.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JS一个数组A是否全包含另一个数组B</title>
    <link href="https://845146913.github.io/2017/10/25/firstDoc/"/>
    <id>https://845146913.github.io/2017/10/25/firstDoc/</id>
    <published>2017-10-25T15:01:36.000Z</published>
    <updated>2017-10-27T13:08:26.597Z</updated>
    
    <content type="html"><![CDATA[<p>正文：</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isContained</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || !(b <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span>(a.length &lt; b.length) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">var</span> aStr = a.toString();</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = b.length; i &lt; len; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(aStr.indexOf(b[i]) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正文：&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://845146913.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
