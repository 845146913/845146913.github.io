<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SilenceWang&#39;s Blog</title>
  
  <subtitle>每天进步一点....(不定期更新)</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://845146913.github.io/"/>
  <updated>2018-01-18T11:34:55.411Z</updated>
  <id>https://845146913.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习笔记</title>
    <link href="https://845146913.github.io/2018/01/18/pythonRecord/"/>
    <id>https://845146913.github.io/2018/01/18/pythonRecord/</id>
    <published>2018-01-18T11:25:28.000Z</published>
    <updated>2018-01-18T11:34:55.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python笔记"><a href="#python笔记" class="headerlink" title="python笔记"></a>python笔记</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">print(<span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>))</div><div class="line">print(<span class="string">'%.2f'</span> % <span class="number">3.1415926</span>)</div><div class="line">s1 = <span class="number">72</span></div><div class="line">s2 = <span class="number">85</span></div><div class="line">r = (<span class="number">85</span><span class="number">-72</span>)/<span class="number">72</span>*<span class="number">100</span></div><div class="line">print(<span class="string">'设置：'</span>,<span class="string">'%04.2f %%'</span> % (r))</div><div class="line"><span class="comment"># 2.list[]、tuple()</span></div><div class="line">classmates = [<span class="string">'Michael'</span>,<span class="string">'Bob'</span>,<span class="string">'Tracy'</span>]</div><div class="line">print(classmates,len(classmates))</div><div class="line"><span class="keyword">for</span> str <span class="keyword">in</span> classmates:</div><div class="line">print(str)</div><div class="line">print(<span class="string">'----------------------------------'</span>)</div><div class="line">classmates.insert(<span class="number">1</span>,<span class="string">'Test'</span>)</div><div class="line">classmates.append(<span class="string">'Mike'</span>)</div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> i &lt; len(classmates):</div><div class="line">print(classmates[i])</div><div class="line">i = i + <span class="number">1</span></div><div class="line">classmates.pop()</div><div class="line">classmates.pop(<span class="number">1</span>)</div><div class="line"><span class="keyword">for</span> res <span class="keyword">in</span> classmates:</div><div class="line"><span class="keyword">if</span> res == <span class="string">'Michael'</span>:</div><div class="line">print(<span class="string">'result: %s'</span> % res)</div><div class="line">print(<span class="string">'END'</span>)</div><div class="line">finallist = (<span class="string">'Mspaint'</span>,<span class="string">'Mscmd'</span>,<span class="string">'Msservices'</span>)</div><div class="line"><span class="comment"># no finallist.insert(1,'Msddd')</span></div><div class="line"><span class="comment"># no finallist.append('Dss')</span></div><div class="line">print(<span class="string">'tuple:'</span>, finallist)</div><div class="line">print(<span class="string">'----------------------------------'</span>)</div><div class="line"><span class="comment"># 3. dict&#123;&#125;、set</span></div><div class="line">map = &#123;<span class="string">'A'</span>:<span class="number">90</span>, <span class="string">'B'</span>:<span class="number">80</span>, <span class="string">'C'</span>:<span class="number">70</span>&#125;</div><div class="line"><span class="keyword">for</span> m <span class="keyword">in</span> map:</div><div class="line">print(<span class="string">'key:'</span>,m,<span class="string">' val:'</span>, map.get(m))</div><div class="line"><span class="keyword">if</span> <span class="string">'A'</span> <span class="keyword">in</span> map:</div><div class="line">print(<span class="string">'&gt;&gt;&gt;&gt;'</span>)</div><div class="line">map[<span class="string">'A'</span>] = <span class="number">95</span></div><div class="line"><span class="keyword">if</span> map.get(<span class="string">'D'</span>, <span class="number">-1</span>) == <span class="number">-1</span>:</div><div class="line">print(<span class="string">'&gt;&gt;&gt;&gt;&gt;D:'</span>)</div><div class="line">map[<span class="string">'D'</span>] = <span class="number">60</span></div><div class="line">print(<span class="string">'resMap:'</span>, map)</div><div class="line">map.pop(<span class="string">'A'</span>)</div><div class="line">print(<span class="string">'resMap2:'</span>, map)</div><div class="line"></div><div class="line">myset = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line">myset.add(<span class="number">6</span>)</div><div class="line">myset.add(<span class="number">7</span>)</div><div class="line">myset.remove(<span class="number">3</span>)</div><div class="line">print(<span class="string">'myset:'</span>, myset) </div><div class="line">set2 = set([<span class="number">2</span>,<span class="number">3</span>,<span class="number">8</span>])</div><div class="line">print(<span class="string">'set2&amp;set1:'</span>, myset &amp; set2, myset | set2)</div><div class="line">print(<span class="string">'----------------------------------'</span>)</div><div class="line"></div><div class="line"></div><div class="line">name = input(<span class="string">'按任意键退出...'</span>)</div><div class="line">print(<span class="string">'end'</span>,name)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python笔记&quot;&gt;&lt;a href=&quot;#python笔记&quot; class=&quot;headerlink&quot; title=&quot;python笔记&quot;&gt;&lt;/a&gt;python笔记&lt;/h1&gt;&lt;h2 id=&quot;学习&quot;&gt;&lt;a href=&quot;#学习&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://845146913.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>java8对字符串的操作</title>
    <link href="https://845146913.github.io/2017/11/15/record1/"/>
    <id>https://845146913.github.io/2017/11/15/record1/</id>
    <published>2017-11-15T15:16:54.000Z</published>
    <updated>2017-11-15T15:18:55.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java8对字符串的操作"><a href="#java8对字符串的操作" class="headerlink" title="java8对字符串的操作"></a>java8对字符串的操作</h1><h2 id="1-把list里面的对象id转入Set"><a href="#1-把list里面的对象id转入Set" class="headerlink" title="1.把list里面的对象id转入Set"></a>1.把list里面的对象id转入Set</h2><p>map返回的Stream类型是根据你map传递进去的函数的返回值决定的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Set&lt;Long&gt; ids = list.stream()</div><div class="line">.map(SearchItem::getPt_id)</div><div class="line">.collect(Collectors.toSet());</div></pre></td></tr></table></figure></p><h2 id="2-对字符串连接的操作。"><a href="#2-对字符串连接的操作。" class="headerlink" title="2.对字符串连接的操作。"></a>2.对字符串连接的操作。</h2><pre><code>2.1 java8之前使用StringBuilder来拼接。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">listToString</span><span class="params">(List&lt;String&gt; list, String delimiter)</span> </span>&#123;</div><div class="line">    StringBuilder result = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (String str : list) &#123;</div><div class="line">        result.append(str).append(delimiter);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 删除末尾多余的 delimiter</span></div><div class="line">    result.delete(result.length() - delimiter.length(), result.length()); </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure><pre><code>2.2 或者使用toString()字符串截取.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  List&lt;String&gt; ls = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">ls.add(<span class="string">"1231"</span>);</div><div class="line">ls.add(<span class="string">"erer"</span>);</div><div class="line">String d = <span class="string">"1234"</span>+<span class="string">","</span>+<span class="string">"erer"</span>;</div><div class="line">String res = ls.toString();</div><div class="line">System.err.println(<span class="string">"ls:"</span>+res.substring(<span class="number">1</span>,res.length()-<span class="number">1</span>).replace(<span class="string">" "</span>, <span class="string">""</span>));</div></pre></td></tr></table></figure><pre><code>2.3 然而在java8提供了几种方式。通过新引入的StringJoiner类,构造方法有一、三个参数可选(delimiter, prefix, suffix)。实现方式1：String.join()</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.join(delimiter, list);</div></pre></td></tr></table></figure><pre><code>实现方式2: StringJoiner 替代 listToString(...)的StringBuilder简化代码.</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StringJoiner result = <span class="keyword">new</span> StringJoiner(delimiter);</div><div class="line">    <span class="keyword">for</span> (String str : list) &#123;</div><div class="line">        result.add(str);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">return</span> result.toString();</div></pre></td></tr></table></figure><pre><code>实现方式3:使用stream流操作Collections.joining()方式。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String string = ls.stream().collect(Collectors.joining(<span class="string">","</span>));</div><div class="line">String string = ls.stream().collect(Collectors.joining());</div><div class="line">String string = ls.stream().collect(Collectors.joining(<span class="string">","</span>, <span class="string">"&#123;"</span>, <span class="string">"&#125;"</span>));</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java8对字符串的操作&quot;&gt;&lt;a href=&quot;#java8对字符串的操作&quot; class=&quot;headerlink&quot; title=&quot;java8对字符串的操作&quot;&gt;&lt;/a&gt;java8对字符串的操作&lt;/h1&gt;&lt;h2 id=&quot;1-把list里面的对象id转入Set&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="开发随笔" scheme="https://845146913.github.io/tags/%E5%BC%80%E5%8F%91%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>singleton</title>
    <link href="https://845146913.github.io/2017/11/10/singleton/"/>
    <id>https://845146913.github.io/2017/11/10/singleton/</id>
    <published>2017-11-10T12:47:23.000Z</published>
    <updated>2017-11-10T12:48:14.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1.饿汉式"></a>1.饿汉式</h2><p>   会随着类初始化时，实例化。天生线程安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();  </div><div class="line">    <span class="comment">//静态工厂方法   </span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> single;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h2><pre><code>懒汉式即在需要的时候才实例化。在java多线程并发中得考虑安全问题。因此下面是比较好的代码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span> (Singleton2.class) &#123;</div><div class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>)</div><div class="line">instance = <span class="keyword">new</span> Singleton2();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> instance;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="3-使用Enum枚举类创建单例"><a href="#3-使用Enum枚举类创建单例" class="headerlink" title="3.使用Enum枚举类创建单例"></a>3.使用Enum枚举类创建单例</h2><pre><code>此方式开发中很少有人用。其实这种方式更好。天生线程安全。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">return</span> EnumSingle.instance.instance();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">enum</span> EnumSingle&#123;</div><div class="line">instance;</div><div class="line"><span class="keyword">private</span> Singleton single;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">EnumSingle</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"EnumSingle:"</span>+single);</div><div class="line">single = <span class="keyword">new</span> Singleton();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> Singleton <span class="title">instance</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"instance-&gt;"</span>+single);</div><div class="line"><span class="keyword">return</span> single;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="注：如果利用java反射，能破坏单例特性。"><a href="#注：如果利用java反射，能破坏单例特性。" class="headerlink" title="注：如果利用java反射，能破坏单例特性。"></a>注：如果利用java反射，能破坏单例特性。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;h2 id=&quot;1-饿汉式&quot;&gt;&lt;a href=&quot;#1-饿汉式&quot; class=&quot;headerlink&quot; title=&quot;1.饿汉式&quot;&gt;
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://845146913.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>java8</title>
    <link href="https://845146913.github.io/2017/11/03/java8/"/>
    <id>https://845146913.github.io/2017/11/03/java8/</id>
    <published>2017-11-02T16:01:00.000Z</published>
    <updated>2017-11-02T16:05:09.648Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprSolrDemoApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//1.java8 lamdba表達式</span></div><div class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"apple"</span>, <span class="string">"peace"</span>, <span class="string">"tomato"</span>, <span class="string">"pertato"</span>);</div><div class="line">list.sort((a, b) -&gt; a.compareTo(b));</div><div class="line">System.out.println(list);</div><div class="line">list = Arrays.asList(<span class="string">"cenate"</span>,<span class="string">"ffidt"</span>, <span class="string">"egssg"</span>);</div><div class="line">Collections.sort(list, (a, b) -&gt; b.compareTo(a));</div><div class="line">System.out.println(list);</div><div class="line">Converter&lt;String, Integer&gt; con = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//2.函数式接口</span></div><div class="line">con = (from) -&gt; Integer.valueOf(from);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 2.1 静态方法引用</span></div><div class="line"><span class="comment"> * Java 8 允许你使用 :: 关键字来传递方法或者构造函数引用，以下为静态方法</span></div><div class="line"><span class="comment"> */</span></div><div class="line">con = Integer::valueOf;</div><div class="line"><span class="comment">//con = (s)-&gt;s.startsWith("a");</span></div><div class="line">Integer result = con.convert(<span class="string">"123"</span>);</div><div class="line">System.out.println(result);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 2.2 ::构造函数的引用</span></div><div class="line"><span class="comment"> * 使用构造函数引用来将他们关联起来，而不是实现一个完整的工厂</span></div><div class="line"><span class="comment"> * 我们只需要使用 Person::new 来获取Person类构造函数的引用，</span></div><div class="line"><span class="comment"> *  Java编译器会自动根据PersonFactory.create方法的签名来选择合适的构造函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line">PersonFactory&lt;Person&gt; personFactory = Person::<span class="keyword">new</span>;</div><div class="line">Person person = personFactory.create(<span class="string">"Wang"</span>, <span class="string">"ShuiPing"</span>);</div><div class="line">System.out.println(person);</div><div class="line"><span class="comment">//3.lambda作用域</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 在lambda表达式中访问外层作用域和老版本的匿名对象中的方式很相似。你可以直接访问标记了final的外层局部变量，或者实例的字段以及静态变量。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> num = <span class="number">1</span>;</div><div class="line">Converter&lt;Integer, String&gt; con1 =</div><div class="line">        (from) -&gt; String.valueOf(from + num);</div><div class="line"> </div><div class="line">con1.convert(<span class="number">2</span>);     <span class="comment">// 3, 这里的变量num可以不用声明为final,</span></div><div class="line"><span class="comment">//num = 2; // 这种方法是不允许</span></div><div class="line">System.out.println(con1.convert(<span class="number">2</span>));</div><div class="line"></div><div class="line"><span class="comment">//4. Stream接口 </span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 有串行stream()和并行parallelStream()，后者为多线程处理，速度快于前者</span></div><div class="line"><span class="comment"> * java.util.Stream 表示能应用在一组元素上一次执行的操作序列。</span></div><div class="line"><span class="comment"> * Stream 操作分为中间操作或者最终操作两种，最终操作返回一特定类型的计算结果，</span></div><div class="line"><span class="comment"> * 而中间操作返回Stream本身，这样你就可以将多个操作依次串起来。</span></div><div class="line"><span class="comment"> * Stream 的创建需要指定一个数据源，比如 java.util.Collection的子类，</span></div><div class="line"><span class="comment"> * List或者Set， Map不支持。Stream的操作可以串行执行或者并行执行</span></div><div class="line"><span class="comment"> */</span></div><div class="line">List&lt;String&gt; stringCollection = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringCollection.add(<span class="string">"ddd2"</span>); </div><div class="line">stringCollection.add(<span class="string">"aaa2"</span>);</div><div class="line">stringCollection.add(<span class="string">"bbb1"</span>);</div><div class="line">stringCollection.add(<span class="string">"aaa1"</span>);</div><div class="line">stringCollection.add(<span class="string">"bbb3"</span>);</div><div class="line">stringCollection.add(<span class="string">"ccc"</span>);</div><div class="line">stringCollection.add(<span class="string">"bbb2"</span>);</div><div class="line">stringCollection.add(<span class="string">"ddd1"</span>);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.1 Filter 过滤</span></div><div class="line"><span class="comment"> * 过滤通过一个predicate接口来过滤并只保留符合条件的元素，</span></div><div class="line"><span class="comment"> * 该操作属于中间操作，</span></div><div class="line"><span class="comment"> * 所以我们可以在过滤后的结果来应用其他Stream操作（比如forEach）。</span></div><div class="line"><span class="comment"> * forEach需要一个函数来对过滤后的元素依次执行。</span></div><div class="line"><span class="comment"> * forEach是一个最终操作，所以我们不能在forEach之后来执行其他Stream操作</span></div><div class="line"><span class="comment"> */</span></div><div class="line">stringCollection.stream()</div><div class="line">.filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</div><div class="line">.forEach(System.out::println);;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.2 Sort 排序</span></div><div class="line"><span class="comment"> * 排序是一个中间操作，返回的是排序好后的Stream。如果你不指定一个自定义的Comparator则会使用默认排序。</span></div><div class="line"><span class="comment"> */</span></div><div class="line">stringCollection.stream()</div><div class="line">.filter(s -&gt; s.startsWith(<span class="string">"a"</span>))</div><div class="line">.sorted()</div><div class="line">.forEach(System.out::println);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.3 Map 映射</span></div><div class="line"><span class="comment"> * 中间操作map会将元素根据指定的Function接口来依次将元素转成另外的对象，</span></div><div class="line"><span class="comment"> * 下面的示例展示了将字符串转换为大写字符串。你也可以通过map来讲对象转换成其他类型，</span></div><div class="line"><span class="comment"> * map返回的Stream类型是根据你map传递进去的函数的返回值决定的</span></div><div class="line"><span class="comment"> */</span></div><div class="line">stringCollection</div><div class="line">    .stream()</div><div class="line">    .map(String::toUpperCase)</div><div class="line">    .sorted((a, b) -&gt; b.compareTo(a))</div><div class="line">    .forEach(System.out::println);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.4 Match 匹配</span></div><div class="line"><span class="comment"> * Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，并返回一个boolean类型的值。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">boolean</span> anyStartsWithA = </div><div class="line">    stringCollection</div><div class="line">        .stream() </div><div class="line">        .anyMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));</div><div class="line">System.out.println(anyStartsWithA);      <span class="comment">// true</span></div><div class="line"><span class="keyword">boolean</span> allStartsWithA = </div><div class="line">    stringCollection</div><div class="line">        .stream()</div><div class="line">        .allMatch((s) -&gt; s.startsWith(<span class="string">"a"</span>));</div><div class="line">System.out.println(allStartsWithA);      <span class="comment">// false</span></div><div class="line"><span class="keyword">boolean</span> noneStartsWithZ = </div><div class="line">    stringCollection</div><div class="line">        .stream()</div><div class="line">        .noneMatch((s) -&gt; s.startsWith(<span class="string">"z"</span>));</div><div class="line">System.out.println(noneStartsWithZ);      <span class="comment">// true</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.5 Count 计数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">long</span> startsWithB = </div><div class="line">    stringCollection</div><div class="line">        .stream() </div><div class="line">        .filter((s) -&gt; s.startsWith(<span class="string">"b"</span>))</div><div class="line">        .count();</div><div class="line"> </div><div class="line">System.out.println(startsWithB);    <span class="comment">// 3</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 4.6 Reduce 规约</span></div><div class="line"><span class="comment"> * 规约成一个元素，规越后的结果是通过Optional接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Optional&lt;String&gt; reduced =</div><div class="line">    stringCollection</div><div class="line">        .stream() </div><div class="line">        .sorted()</div><div class="line">        .reduce((s1, s2) -&gt; s1 + <span class="string">"#"</span> + s2);</div><div class="line">reduced.ifPresent(System.out::println);</div><div class="line"><span class="comment">// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * PS：原数据是不会被修改的</span></div><div class="line"><span class="comment"> */</span></div><div class="line">System.out.println(stringCollection);</div><div class="line"><span class="comment">//---------</span></div><div class="line"><span class="keyword">int</span> max = <span class="number">1000000</span>;</div><div class="line">List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;&gt;(max);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123; </div><div class="line">    UUID uuid = UUID.randomUUID();</div><div class="line">    values.add(uuid.toString());</div><div class="line">&#125;</div><div class="line"><span class="comment">//----stream()</span></div><div class="line"><span class="keyword">long</span> t0 = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">long</span> count = values.stream().sorted().count();</div><div class="line">System.out.println(count);</div><div class="line"><span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"><span class="keyword">long</span> millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);</div><div class="line">System.out.println(String.format(<span class="string">"sequential sort took: %d ms"</span>, millis));</div><div class="line"><span class="comment">//------parallelStream()</span></div><div class="line"><span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line"> </div><div class="line"><span class="keyword">long</span> count1 = values.parallelStream().sorted().count();</div><div class="line">System.out.println(count1);</div><div class="line"><span class="keyword">long</span> t3 = System.nanoTime();</div><div class="line"><span class="keyword">long</span> millis1 = TimeUnit.NANOSECONDS.toMillis(t3 - t2);</div><div class="line">System.out.println(String.format(<span class="string">"parallel sort took: %d ms"</span>, millis1));</div><div class="line"></div><div class="line"><span class="comment">////5. 对Map的操作</span></div><div class="line">Map&lt;Integer, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</div><div class="line">map.putIfAbsent(i, <span class="string">"val"</span> + i);</div><div class="line">&#125;</div><div class="line">map.forEach((key,val)-&gt;&#123;System.out.println(<span class="string">"key:"</span>+key+<span class="string">" val:"</span>+val);&#125;);</div><div class="line">System.out.println(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//2.函数式接口</span></div><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Converter</span>&lt;<span class="title">F</span>, <span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">convert</span><span class="params">(F from)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//2.2实现构造函数引用 --开始</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    String firstName;</div><div class="line">    String lastName;</div><div class="line"> </div><div class="line">    Person() &#123;&#125;</div><div class="line">    Person(String firstName, String lastName) &#123;</div><div class="line">        <span class="keyword">this</span>.firstName = firstName;</div><div class="line">        <span class="keyword">this</span>.lastName = lastName;</div><div class="line">    &#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"Person [firstName="</span> + firstName + <span class="string">", lastName="</span> + lastName + <span class="string">"]"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 指定一个用来创建Person对象的对象工厂接口</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> wangshuip</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;P&gt;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonFactory</span>&lt;<span class="title">P</span> <span class="keyword">extends</span> <span class="title">Person</span>&gt; </span>&#123;</div><div class="line">    <span class="function">P <span class="title">create</span><span class="params">(String firstName, String lastName)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//2.2实现构造函数引用 --结束</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
      
    
    </summary>
    
    
      <category term="java8特性" scheme="https://845146913.github.io/tags/java8%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://845146913.github.io/2017/10/26/git/"/>
    <id>https://845146913.github.io/2017/10/26/git/</id>
    <published>2017-10-26T04:48:01.000Z</published>
    <updated>2018-01-18T11:24:12.549Z</updated>
    
    <content type="html"><![CDATA[<p>常用的git指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add -xxx </div><div class="line">git commit -m &quot;XXXX&quot;</div><div class="line">git push -u origin </div><div class="line">git clone [url] yourpathname</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用的git指令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div c
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://845146913.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JS一个数组A是否全包含另一个数组B</title>
    <link href="https://845146913.github.io/2017/10/25/firstDoc/"/>
    <id>https://845146913.github.io/2017/10/25/firstDoc/</id>
    <published>2017-10-25T15:01:36.000Z</published>
    <updated>2017-10-27T13:08:26.597Z</updated>
    
    <content type="html"><![CDATA[<p>正文：</p><p>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isContained</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(!(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || !(b <span class="keyword">instanceof</span> <span class="built_in">Array</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">if</span>(a.length &lt; b.length) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">var</span> aStr = a.toString();</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = b.length; i &lt; len; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(aStr.indexOf(b[i]) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正文：&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://845146913.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
